
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package naturaltosql.compiler;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\003\005\000\002\003\007\000" +
    "\002\004\005\000\002\006\004\000\002\006\006\000\002" +
    "\005\005\000\002\005\007\000\002\007\006\000\002\011" +
    "\003\000\002\011\003\000\002\011\002\000\002\013\004" +
    "\000\002\013\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\020\004\000\002\020\003\000\002\021\005\000\002\021" +
    "\006\000\002\016\004\000\002\016\005\000\002\015\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\014\004\014\006\016\007\007\010\004\011" +
    "\005\001\002\000\004\023\022\001\002\000\004\023\022" +
    "\001\002\000\004\013\102\001\002\000\004\023\022\001" +
    "\002\000\004\013\072\001\002\000\004\013\071\001\002" +
    "\000\004\002\ufffb\001\002\000\004\013\070\001\002\000" +
    "\004\023\022\001\002\000\004\002\056\001\002\000\004" +
    "\023\022\001\002\000\004\013\020\001\002\000\004\002" +
    "\ufffc\001\002\000\022\012\ufff0\013\ufff0\014\024\015\025" +
    "\016\026\017\032\020\023\022\031\001\002\000\032\005" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\022\uffe2\027\uffe2\030\uffe2\031\uffe2\001\002\000" +
    "\042\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\024\uffd1\025\uffd1\026\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\001\002\000\042\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\001\002\000\042\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\001\002\000\042\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\024\uffd3\025\uffd3\026\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002" +
    "\000\020\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\001\002\000\006\012\035\013\ufffa\001\002" +
    "\000\006\012\ufff1\013\ufff1\001\002\000\042\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\001\002\000\020\012\ufff2\013\ufff2\014\024" +
    "\015\025\016\026\017\032\020\023\001\002\000\020\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\001\002\000\014\014\024\015\025\016\026\017\032\020" +
    "\023\001\002\000\010\013\ufff9\040\052\041\053\001\002" +
    "\000\016\032\042\033\041\034\044\035\043\036\040\037" +
    "\045\001\002\000\010\027\uffdd\030\uffdd\031\uffdd\001\002" +
    "\000\010\027\uffe0\030\uffe0\031\uffe0\001\002\000\010\027" +
    "\uffe1\030\uffe1\031\uffe1\001\002\000\010\027\uffde\030\uffde" +
    "\031\uffde\001\002\000\010\027\uffdf\030\uffdf\031\uffdf\001" +
    "\002\000\010\027\uffdc\030\uffdc\031\uffdc\001\002\000\010" +
    "\027\050\030\051\031\047\001\002\000\010\013\uffe9\040" +
    "\uffe9\041\uffe9\001\002\000\010\013\uffeb\040\uffeb\041\uffeb" +
    "\001\002\000\010\013\uffea\040\uffea\041\uffea\001\002\000" +
    "\014\014\024\015\025\016\026\017\032\020\023\001\002" +
    "\000\014\014\024\015\025\016\026\017\032\020\023\001" +
    "\002\000\010\013\uffed\040\uffed\041\uffed\001\002\000\010" +
    "\013\uffec\040\uffec\041\uffec\001\002\000\004\002\000\001" +
    "\002\000\004\005\060\001\002\000\014\014\024\015\025" +
    "\016\026\017\032\020\023\001\002\000\010\024\064\025" +
    "\063\026\066\001\002\000\004\013\ufff3\001\002\000\006" +
    "\013\uffd9\021\uffd9\001\002\000\006\013\uffda\021\uffda\001" +
    "\002\000\006\013\uffe4\021\067\001\002\000\006\013\uffdb" +
    "\021\uffdb\001\002\000\004\013\uffe3\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\004\002\ufffd" +
    "\001\002\000\010\027\100\030\077\031\074\001\002\000" +
    "\010\012\uffd6\013\uffd6\021\uffd6\001\002\000\006\013\uffe7" +
    "\021\101\001\002\000\004\013\ufff8\001\002\000\010\012" +
    "\uffd7\013\uffd7\021\uffd7\001\002\000\010\012\uffd8\013\uffd8" +
    "\021\uffd8\001\002\000\004\013\uffe8\001\002\000\004\002" +
    "\ufffe\001\002\000\014\014\024\015\025\016\026\017\032" +
    "\020\023\001\002\000\006\012\111\013\ufff5\001\002\000" +
    "\004\036\106\001\002\000\010\027\100\030\077\031\074" +
    "\001\002\000\010\012\uffe6\013\uffe6\021\110\001\002\000" +
    "\006\012\uffe5\013\uffe5\001\002\000\014\014\024\015\025" +
    "\016\026\017\032\020\023\001\002\000\010\013\ufff4\040" +
    "\052\041\053\001\002\000\006\012\114\013\ufff7\001\002" +
    "\000\014\014\024\015\025\016\026\017\032\020\023\001" +
    "\002\000\010\013\ufff6\040\052\041\053\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\020\002\014\003\012\004\010\005\005\006" +
    "\007\007\016\023\011\001\001\000\004\015\112\001\001" +
    "\000\004\015\102\001\001\000\002\001\001\000\004\015" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\056\001\001\000" +
    "\002\001\001\000\004\015\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\027\013\032\014\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\033\001\001\000\002\001\001\000\006\010\035\014" +
    "\036\001\001\000\002\001\001\000\004\012\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\054\014\036\001\001\000\006\010\053" +
    "\014\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\060\016\061" +
    "\001\001\000\004\017\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\075\022\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\104\021\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\111\014\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\114" +
    "\014\036\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticAnalyzer$actions {
  private final SintacticAnalyzer parser;

  /** Constructor */
  CUP$SintacticAnalyzer$actions(SintacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticAnalyzer$do_action_part00000000(
    int                        CUP$SintacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SintacticAnalyzer$parser,
    java.util.Stack            CUP$SintacticAnalyzer$stack,
    int                        CUP$SintacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SintacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ROOT ::= LISTAR TK_FIN_SENTENCIA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + ";"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticAnalyzer$parser.done_parsing();
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ROOT ::= INSERTAR TK_FIN_SENTENCIA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + ";"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ROOT ::= ACTUALIZAR TK_FIN_SENTENCIA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + ";"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ROOT ::= ELIMINAR TK_FIN_SENTENCIA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + ";"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ROOT ::= CREAR_TABLA TK_FIN_SENTENCIA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + ";"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ROOT ::= ERROR 
            {
              Object RESULT =null;
		 RESULT = "Error en la sentencia SQL ingresada."; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAR ::= TK_LISTAR NOMBRE_TABLA COLUMNAS 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "SELECT " + token2 + " FROM " + token; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("LISTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAR ::= TK_LISTAR NOMBRE_TABLA COLUMNAS TK_DONDE DONDE 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token3 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "SELECT " + token2 + " FROM " + token + " WHERE " + token3; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("LISTAR",1, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSERTAR ::= TK_INSERTAR NOMBRE_TABLA VALOR_CON_COMA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "INSERT INTO " + token + " VALUES(" + token2 + ")"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INSERTAR",2, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELIMINAR ::= TK_BORRAR NOMBRE_TABLA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "DELETE FROM " +  token; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELIMINAR ::= TK_BORRAR NOMBRE_TABLA TK_DONDE DONDE 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "DELETE FROM " + token + " WHERE " + token2; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ELIMINAR",4, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ACTUALIZAR ::= TK_ACTUALIZAR NOMBRE_TABLA CAMPO_CON_VALOR 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "UPDATE " + token + " SET " + token2; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ACTUALIZAR ::= TK_ACTUALIZAR NOMBRE_TABLA CAMPO_CON_VALOR TK_DONDE DONDE 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token3 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "UPDATE " + token + " SET " + token2 + " WHERE " + token3; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR",3, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CREAR_TABLA ::= TK_CREAR_TABLA NOMBRE_TABLA TK_ATRIBUTOS DEFINICION_CAMPO 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = "CREATE TABLE " + token + " (" + token2 + ")"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CREAR_TABLA",5, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COLUMNAS ::= DETALLE_COLUMNAS 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNAS",7, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COLUMNAS ::= TK_TODOS 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNAS",7, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COLUMNAS ::= 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNAS",7, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DETALLE_COLUMNAS ::= DETALLE_COLUMNAS COLUMNA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + ", " + token2; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DETALLE_COLUMNAS",9, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DETALLE_COLUMNAS ::= COLUMNA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DETALLE_COLUMNAS",9, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DONDE ::= DONDE TK_Y DONDE 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + " AND " + token2 + " "; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DONDE",6, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DONDE ::= DONDE TK_O DONDE 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + " OR " + token2 + " "; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DONDE",6, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DONDE ::= COLUMNA OPERADOR TK_CADENA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + " " + token2 + " '" + token3 + "'"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DONDE",6, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DONDE ::= COLUMNA OPERADOR TK_ENTERO 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + " " + token2 + " " + token3; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DONDE",6, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DONDE ::= COLUMNA OPERADOR TK_REAL 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + " " + token2 + " " + token3; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DONDE",6, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR_CON_COMA ::= VALOR_CAMPO TK_COMA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + " ,"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_CON_COMA",14, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR_CON_COMA ::= VALOR_CAMPO 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_CON_COMA",14, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CAMPO_CON_VALOR ::= COLUMNA TK_IGUAL VALOR_CAMPO 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + " = "  + token2; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CAMPO_CON_VALOR",15, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CAMPO_CON_VALOR ::= COLUMNA TK_IGUAL VALOR_CAMPO TK_COMA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + " = " + token2 + ", "; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("CAMPO_CON_VALOR",15, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFINICION_CAMPO ::= COLUMNA TIPO_DATO_CAMPO 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token + " " + token2; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFINICION_CAMPO",12, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFINICION_CAMPO ::= COLUMNA TIPO_DATO_CAMPO TK_COMA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).right;
		String token2 = (String)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-1)).value;
		 RESULT = token + " " + token2 + ","; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DEFINICION_CAMPO",12, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.elementAt(CUP$SintacticAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NOMBRE_TABLA ::= TK_TABLA_ESTUDIANTE 
            {
              String RESULT =null;
		 RESULT = "Estudiante"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("NOMBRE_TABLA",11, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADOR ::= TK_MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR",8, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADOR ::= TK_MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR",8, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERADOR ::= TK_MAYOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR",8, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADOR ::= TK_MENOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR",8, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERADOR ::= TK_IGUAL 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR",8, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERADOR ::= TK_DIFERENTE 
            {
              String RESULT =null;
		 RESULT = "<>"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERADOR",8, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_DATO_CAMPO ::= TK_CADENA_DEFINICION 
            {
              String RESULT =null;
		 RESULT = "String"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_CAMPO",13, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_DATO_CAMPO ::= TK_ENTERO_DEFINICION 
            {
              String RESULT =null;
		 RESULT = "Integer"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_CAMPO",13, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_DATO_CAMPO ::= TK_REAL_DEFINICION 
            {
              String RESULT =null;
		 RESULT = "Float"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_CAMPO",13, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR_CAMPO ::= TK_CADENA 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token.toString(); 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_CAMPO",16, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR_CAMPO ::= TK_ENTERO 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token.toString(); 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_CAMPO",16, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR_CAMPO ::= TK_REAL 
            {
              String RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$SintacticAnalyzer$stack.peek()).value;
		 RESULT = token.toString(); 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_CAMPO",16, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COLUMNA ::= TK_NOMBRE 
            {
              String RESULT =null;
		 RESULT = "nombre"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNA",10, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COLUMNA ::= TK_CARNET 
            {
              String RESULT =null;
		 RESULT = "carnet"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNA",10, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COLUMNA ::= TK_PROMEDIO 
            {
              String RESULT =null;
		 RESULT = "promedio"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNA",10, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COLUMNA ::= TK_TELEFONO 
            {
              String RESULT =null;
		 RESULT = "telefono"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNA",10, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COLUMNA ::= TK_CARRERA 
            {
              String RESULT =null;
		 RESULT = "carrera"; 
              CUP$SintacticAnalyzer$result = parser.getSymbolFactory().newSymbol("COLUMNA",10, ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SintacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticAnalyzer$do_action(
    int                        CUP$SintacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SintacticAnalyzer$parser,
    java.util.Stack            CUP$SintacticAnalyzer$stack,
    int                        CUP$SintacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SintacticAnalyzer$do_action_part00000000(
                               CUP$SintacticAnalyzer$act_num,
                               CUP$SintacticAnalyzer$parser,
                               CUP$SintacticAnalyzer$stack,
                               CUP$SintacticAnalyzer$top);
    }
}

}

/* The following code was generated by JFlex 1.4.3 on 5/30/15 4:09 AM */

// Primera sección de JLex
// Código copiado literalmente a la clase generadora de tokens
package naturaltosql.compiler;


import java_cup.runtime.Symbol;
import java_cup.sym;
import java.util.ArrayList;
import java.lang.String;
import java.io.StringReader;
import naturaltosql.contexto.ErrorLexico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/30/15 4:09 AM from the specification file
 * <tt>/Users/jonathansamines/Documents/projects/personal/naturaltosql/src/naturaltosql/sources/LexicalAnalyzer.lex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DEFINICION_CAMPO = 18;
  public static final int VALOR_CAMPO = 26;
  public static final int ACTUALIZAR = 6;
  public static final int ELIMINAR = 8;
  public static final int NOMBRE_TABLA = 12;
  public static final int INSERTAR = 4;
  public static final int CAMPO_CON_VALOR = 24;
  public static final int COLUMNAS = 16;
  public static final int LISTAR = 2;
  public static final int VALOR_CON_COMA = 22;
  public static final int YYINITIAL = 0;
  public static final int DONDE = 14;
  public static final int TIPO_DATO_CAMPO = 20;
  public static final int CREAR_TABLA = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  3,  3, 
     4,  4,  5,  5,  6,  6,  7,  7,  8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 21,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27,  0, 25,  0,  4,  0, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 10, 20, 30, 26, 29,  0, 
     0,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  0,  0,  0,  5, 
     0,  9, 13,  6, 19,  8, 24,  5,  5, 12,  5,  5, 16, 22, 17, 15, 
    23,  5,  7,  2, 11, 14,  5,  5,  5, 28, 18,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\3\1\1\0\1\1\1\0"+
    "\1\4\1\1\6\4\1\5\1\2\1\4\1\3\1\1"+
    "\2\3\1\6\2\3\1\7\1\10\1\11\1\12\3\4"+
    "\1\13\1\14\1\1\7\4\1\15\1\16\4\4\1\7"+
    "\1\17\10\0\2\3\1\6\2\3\1\7\1\10\1\11"+
    "\1\20\1\12\1\21\17\0\1\7\10\0\4\3\1\20"+
    "\1\21\12\0\1\22\14\0\5\3\12\0\1\23\14\0"+
    "\1\24\1\0\5\3\20\0\1\25\3\0\1\26\1\27"+
    "\1\0\1\3\1\30\1\3\1\31\1\3\1\0\1\30"+
    "\1\0\1\31\1\0\1\32\1\0\1\33\1\0\1\34"+
    "\1\35\1\0\1\30\1\0\1\31\5\0\1\36\1\30"+
    "\1\3\1\31\1\3\1\36\1\0\1\37\2\0\1\36"+
    "\3\0\1\40\1\0\1\36\1\41\1\42\1\41\1\43"+
    "\1\44\1\41\1\42\2\0\1\41\2\42\1\45\2\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\37\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\u01d1\0\u01f0\0\37\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383"+
    "\0\u03a2\0\u03c1\0\u03e0\0\37\0\37\0\u03ff\0\u041e\0\u043d"+
    "\0\u045c\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535"+
    "\0\u0554\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d"+
    "\0\u064c\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u024d"+
    "\0\u0725\0\u0744\0\u024d\0\u024d\0\u024d\0\u0763\0\u024d\0\u0782"+
    "\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a"+
    "\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953\0\37"+
    "\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b"+
    "\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u024d\0\u024d\0\u0ae6\0\u0b05"+
    "\0\u0b24\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd"+
    "\0\u08d7\0\u0c1c\0\u0c3b\0\u0c5a\0\u0c79\0\u0c98\0\u0cb7\0\u0cd6"+
    "\0\u0cf5\0\u0d14\0\u0d33\0\u0d52\0\u0d71\0\u0d90\0\u0daf\0\u0dce"+
    "\0\u0ded\0\u0e0c\0\u0e2b\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6"+
    "\0\u0ee5\0\u0f04\0\u0f23\0\u0f42\0\37\0\u0f61\0\u0f80\0\u0f9f"+
    "\0\u0fbe\0\u0fdd\0\u0ffc\0\u101b\0\u103a\0\u1059\0\u1078\0\u1097"+
    "\0\u10b6\0\37\0\u10d5\0\u10f4\0\u1113\0\u1132\0\u1151\0\u1170"+
    "\0\u118f\0\u11ae\0\u11cd\0\u11ec\0\u120b\0\u122a\0\u1249\0\u1268"+
    "\0\u1287\0\u12a6\0\u12c5\0\u12e4\0\u1303\0\u1322\0\u1341\0\u1360"+
    "\0\37\0\u137f\0\u139e\0\u13bd\0\37\0\37\0\u13dc\0\u13fb"+
    "\0\u141a\0\u1439\0\u1458\0\u1477\0\u1496\0\37\0\u14b5\0\37"+
    "\0\u14d4\0\37\0\u14f3\0\37\0\u1512\0\37\0\37\0\u1531"+
    "\0\u1550\0\u156f\0\u158e\0\u15ad\0\u15cc\0\u15eb\0\u160a\0\u1629"+
    "\0\u1648\0\u024d\0\u1667\0\u024d\0\u1686\0\37\0\u16a5\0\37"+
    "\0\u16c4\0\u16e3\0\u1702\0\u1721\0\u1740\0\u175f\0\37\0\u177e"+
    "\0\u024d\0\u179d\0\u17bc\0\37\0\37\0\37\0\u17db\0\u17fa"+
    "\0\u1819\0\u1838\0\u024d\0\u024d\0\37\0\37\0\u1857\0\37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\3\13\1\15\2\13\1\16\2\13\1\17"+
    "\1\20\2\13\1\21\2\13\1\22\1\23\1\14\11\13"+
    "\37\0\1\13\2\24\5\13\1\25\14\13\1\24\11\13"+
    "\1\26\2\27\3\26\1\30\4\26\1\31\3\26\1\32"+
    "\1\26\1\33\3\26\1\27\1\26\1\34\2\26\1\35"+
    "\1\26\1\36\1\37\1\40\1\13\2\14\3\13\1\41"+
    "\4\13\1\42\5\13\1\43\3\13\1\14\3\13\1\44"+
    "\1\13\1\45\5\13\1\46\3\13\1\47\4\13\1\50"+
    "\5\13\1\51\3\13\1\0\1\13\1\52\1\13\1\44"+
    "\7\13\1\46\3\13\1\53\1\54\1\55\14\13\1\0"+
    "\13\13\1\56\1\57\1\13\5\56\1\13\11\56\1\13"+
    "\1\0\3\56\1\44\2\13\1\56\4\13\1\46\3\13"+
    "\1\60\4\13\1\61\5\13\1\62\3\13\1\0\1\13"+
    "\1\63\1\13\1\44\1\64\6\13\1\65\1\57\1\13"+
    "\5\65\1\13\11\65\1\13\1\0\3\65\3\13\1\65"+
    "\2\13\1\0\2\14\22\0\1\14\20\0\1\66\35\0"+
    "\1\67\4\0\1\70\44\0\1\71\34\0\1\72\33\0"+
    "\1\73\41\0\1\74\20\0\2\24\22\0\1\24\13\0"+
    "\1\75\34\0\40\26\2\27\22\26\1\27\22\26\1\76"+
    "\35\26\1\77\30\26\1\100\53\26\1\101\26\26\1\102"+
    "\31\26\1\103\36\26\1\104\36\26\1\105\27\26\1\106"+
    "\6\26\1\107\27\26\1\110\4\26\11\0\1\111\35\0"+
    "\1\112\45\0\1\113\21\0\1\46\45\0\1\114\35\0"+
    "\1\115\45\0\1\116\26\0\1\117\40\0\1\120\35\0"+
    "\1\121\47\0\1\122\17\0\1\56\2\0\5\56\1\0"+
    "\11\56\2\0\3\56\3\0\1\56\5\0\1\57\1\123"+
    "\43\0\1\124\35\0\1\125\45\0\1\126\26\0\1\127"+
    "\31\0\1\130\36\0\1\65\2\0\5\65\1\0\11\65"+
    "\2\0\3\65\3\0\1\65\12\0\1\131\41\0\1\132"+
    "\32\0\1\133\31\0\1\134\43\0\1\135\31\0\1\136"+
    "\55\0\1\137\30\0\1\140\23\0\7\26\1\141\47\26"+
    "\1\142\44\26\1\143\27\26\1\144\21\26\1\145\36\26"+
    "\1\146\34\26\7\0\1\147\47\0\1\150\44\0\1\151"+
    "\17\0\1\152\47\0\1\153\44\0\1\154\27\0\1\155"+
    "\42\0\1\156\24\0\1\157\40\0\1\160\26\0\1\161"+
    "\42\0\1\162\47\0\1\163\44\0\1\164\27\0\1\165"+
    "\30\0\1\166\43\0\1\167\34\0\1\170\32\0\1\171"+
    "\35\0\1\172\42\0\1\173\46\0\1\174\31\0\1\175"+
    "\20\0\7\26\1\176\11\26\1\177\25\26\1\200\43\26"+
    "\1\201\47\26\1\202\10\26\7\0\1\203\11\0\1\204"+
    "\25\0\1\205\43\0\1\206\30\0\1\207\11\0\1\210"+
    "\25\0\1\211\43\0\1\212\47\0\1\213\20\0\1\214"+
    "\46\0\1\215\26\0\1\216\35\0\1\217\11\0\1\220"+
    "\25\0\1\221\43\0\1\222\47\0\1\223\17\0\1\224"+
    "\40\0\1\225\42\0\1\226\30\0\1\227\40\0\1\230"+
    "\36\0\1\231\35\0\1\232\51\0\1\233\13\0\10\26"+
    "\1\234\36\26\1\235\56\26\1\236\15\26\1\237\37\26"+
    "\1\240\26\26\10\0\1\241\36\0\1\242\56\0\1\243"+
    "\15\0\1\244\37\0\1\245\36\0\1\246\56\0\1\247"+
    "\15\0\1\250\37\0\1\251\47\0\1\252\24\0\1\253"+
    "\37\0\1\254\36\0\1\255\56\0\1\256\15\0\1\257"+
    "\37\0\1\260\30\0\1\224\7\0\1\261\44\0\1\262"+
    "\34\0\1\263\33\0\1\264\32\0\1\265\36\0\1\266"+
    "\43\0\1\267\22\0\7\26\1\270\42\26\1\271\42\26"+
    "\1\272\27\26\1\273\51\26\1\274\13\26\7\0\1\275"+
    "\42\0\1\276\42\0\1\277\27\0\1\300\35\0\1\301"+
    "\42\0\1\302\42\0\1\303\27\0\1\304\51\0\1\305"+
    "\24\0\1\306\44\0\1\307\26\0\1\310\42\0\1\311"+
    "\42\0\1\312\27\0\1\313\51\0\1\314\27\0\1\315"+
    "\35\0\1\316\34\0\1\317\36\0\1\320\25\0\11\26"+
    "\1\321\27\26\1\322\55\26\1\323\17\26\1\324\50\26"+
    "\1\325\22\26\11\0\1\326\46\0\1\327\26\0\1\330"+
    "\46\0\1\331\31\0\1\332\33\0\1\333\27\0\1\276"+
    "\55\0\1\334\17\0\1\300\50\0\1\335\44\0\1\264"+
    "\33\0\1\336\26\0\1\337\50\0\1\340\15\0\2\26"+
    "\1\341\53\26\1\342\36\26\1\343\17\26\17\0\1\344"+
    "\36\0\1\345\36\0\1\346\21\0\1\326\53\0\1\347"+
    "\36\0\1\350\21\0\1\351\47\0\1\352\23\0\2\26"+
    "\1\353\36\26\1\354\34\26\2\0\1\344\36\0\1\355"+
    "\36\0\1\351\7\0\1\356\34\0\1\357\40\0\1\360"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6262];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\10\5\1\1\0\1\1\1\0\1\11\7\1"+
    "\1\11\20\1\2\11\20\1\10\0\13\1\17\0\1\11"+
    "\10\0\6\1\12\0\1\1\14\0\5\1\12\0\1\11"+
    "\14\0\1\11\1\0\5\1\20\0\1\11\3\0\2\11"+
    "\1\0\5\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\1\1\0\1\1"+
    "\5\0\5\1\1\11\1\0\1\11\2\0\1\1\3\0"+
    "\1\11\1\0\3\1\3\11\2\1\2\0\2\1\2\11"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

	ArrayList<ErrorLexico> tokensNoValidos = null;
	
	
	public ArrayList<ErrorLexico> getNotUsedTokens(){
		return this.tokensNoValidos;
	}
	
	public void agregarTokenNoValido(String token, int linea, int columna) {
		this.tokensNoValidos.add(new ErrorLexico(token, linea, columna));
	}
	
	public LexicalAnalyzer(String input) {
    	StringReader reader = new StringReader(input.toLowerCase());
    	
    	this.tokensNoValidos = new ArrayList<ErrorLexico>();
    	this.zzReader = reader; // zzReader es un objeto especial de lex
 	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yybegin(VALOR_CAMPO); return new Symbol(Symbols.TK_MAYOR);
          }
        case 39: break;
        case 33: 
          { return new Symbol(Symbols.TK_TELEFONO);
          }
        case 40: break;
        case 16: 
          { yybegin(VALOR_CAMPO); return new Symbol(Symbols.TK_MAYOR_IGUAL);
          }
        case 41: break;
        case 4: 
          { this.agregarTokenNoValido(yytext(), yyline, yychar);
          }
        case 42: break;
        case 24: 
          { return new Symbol(Symbols.TK_CARNET);
          }
        case 43: break;
        case 10: 
          { yybegin(VALOR_CAMPO); return new Symbol(Symbols.TK_MENOR);
          }
        case 44: break;
        case 28: 
          { return new Symbol(Symbols.TK_CADENA_DEFINICION);
          }
        case 45: break;
        case 11: 
          { return new Symbol(Symbols.TK_COMA);
          }
        case 46: break;
        case 23: 
          { yybegin(NOMBRE_TABLA); return new Symbol(Symbols.TK_LISTAR);
          }
        case 47: break;
        case 3: 
          { yybegin(VALOR_CAMPO); return new Symbol(Symbols.TK_DIFERENTE);
          }
        case 48: break;
        case 7: 
          { yybegin(VALOR_CAMPO); return new Symbol(Symbols.TK_IGUAL);
          }
        case 49: break;
        case 38: 
          { return new Symbol(Symbols.TK_TABLA_ESTUDIANTE);
          }
        case 50: break;
        case 37: 
          { yybegin(DEFINICION_CAMPO); return new Symbol(Symbols.TK_ATRIBUTOS);
          }
        case 51: break;
        case 29: 
          { return new Symbol(Symbols.TK_ENTERO_DEFINICION);
          }
        case 52: break;
        case 18: 
          { return new Symbol(Symbols.TK_REAL, Double.parseDouble(yytext()));
          }
        case 53: break;
        case 30: 
          { return new Symbol(Symbols.TK_CARRERA);
          }
        case 54: break;
        case 15: 
          { return new Symbol(Symbols.TK_CADENA,  new String (yytext()));
          }
        case 55: break;
        case 22: 
          { yybegin(NOMBRE_TABLA); return new Symbol(Symbols.TK_BORRAR);
          }
        case 56: break;
        case 17: 
          { yybegin(VALOR_CAMPO); return new Symbol(Symbols.TK_MENOR_IGUAL);
          }
        case 57: break;
        case 34: 
          { return new Symbol(Symbols.TK_PROMEDIO);
          }
        case 58: break;
        case 31: 
          { yybegin(TIPO_DATO_CAMPO); return new Symbol(Symbols.TK_CARRERA);
          }
        case 59: break;
        case 20: 
          { yybegin(DONDE); return new Symbol(Symbols.TK_DONDE);
          }
        case 60: break;
        case 35: 
          { yybegin(TIPO_DATO_CAMPO); return new Symbol(Symbols.TK_TELEFONO);
          }
        case 61: break;
        case 12: 
          { return new Symbol(Symbols.TK_TODOS);
          }
        case 62: break;
        case 27: 
          { yybegin(TIPO_DATO_CAMPO); return new Symbol(Symbols.TK_NOMBRE);
          }
        case 63: break;
        case 13: 
          { return new Symbol(Symbols.TK_CADENA, new String(yytext()));
          }
        case 64: break;
        case 14: 
          { return new Symbol(Symbols.TK_ENTERO, Integer.parseInt(yytext()));
          }
        case 65: break;
        case 21: 
          { yybegin(NOMBRE_TABLA); return new Symbol(Symbols.TK_CREAR_TABLA);
          }
        case 66: break;
        case 25: 
          { return new Symbol(Symbols.TK_NOMBRE);
          }
        case 67: break;
        case 1: 
          { /* ignorar simbolo */
          }
        case 68: break;
        case 8: 
          { return new Symbol(Symbols.TK_Y);
          }
        case 69: break;
        case 26: 
          { yybegin(TIPO_DATO_CAMPO); return new Symbol(Symbols.TK_CARNET);
          }
        case 70: break;
        case 36: 
          { yybegin(TIPO_DATO_CAMPO); return new Symbol(Symbols.TK_PROMEDIO);
          }
        case 71: break;
        case 5: 
          { return new Symbol(Symbols.TK_FIN_SENTENCIA);
          }
        case 72: break;
        case 32: 
          { yybegin(NOMBRE_TABLA); return new Symbol(Symbols.TK_ACTUALIZAR);
          }
        case 73: break;
        case 19: 
          { return new Symbol(Symbols.TK_REAL_DEFINICION);
          }
        case 74: break;
        case 6: 
          { return new Symbol(Symbols.TK_O);
          }
        case 75: break;
        case 2: 
          { 
          }
        case 76: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
